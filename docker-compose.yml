version: "3.9"

services:

  traefik:
    image: "traefik:v2.2"
    container_name: "traefik"
    command:
      # - "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Let's Encrypt - wildcard - Namecheap
      - --entrypoints.websecure.http.tls.domains[0].main=${TBOX_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${TBOX_DOMAIN}
      - --entrypoints.websecure.http.tls.certresolver=myresolver
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.disablepropagationcheck=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=${DNS_PROVIDER}
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    labels:
      # Middleware
      - "traefik.http.middlewares.httpsonly.redirectscheme.scheme=https"
      - "traefik.http.middlewares.httpsonly.redirectscheme.permanent=true"
      - "traefik.http.routers.httpsonly.rule=HostRegexp(`{any:.*}`)"
      - "traefik.http.routers.httpsonly.middlewares=httpsonly"
      - "traefik.http.middlewares.lan-whitelist.ipwhitelist.sourcerange=${IPWL_ALL}"
      - "traefik.http.middlewares.wg-whitelist.ipwhitelist.sourcerange=${IPWL_WG}"
      # Dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=dashboard@internal"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      # API
      - "traefik.http.routers.api.rule=Host(`traefik.${TBOX_DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=myresolver"

    environment:
      - "NAMECHEAP_API_USER=${NAMECHEAP_API_USER}"
      - "NAMECHEAP_API_KEY=${NAMECHEAP_API_KEY}"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ${TBOX_CONFIG}/tools/traefik:/letsencrypt
    restart: unless-stopped

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.rule=Host(`nzb.${TBOX_DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.sabnzbd.tls.certresolver=myresolver"
      - "traefik.http.routers.sabnzbd.service=sabnzbd"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
      # Traefik - ipwhitelist
      - "traefik.http.routers.sabnzbd.middlewares=lan-whitelist@docker"
    environment:
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # Themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sabnzbd
      - TP_THEME=${TP_THEME}
    volumes:
      - ${TBOX_CONFIG}/tools/sabnzbd:/config
      - ${TBOX_STORAGE}/data/usenet:/data/usenet
    ports:
      -  8080:8080
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.tls.certresolver=myresolver"
      - "traefik.http.routers.radarr.rule=Host(`movies.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.radarr.service=radarr"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      # Traefik - ipwhitelist
      - "traefik.http.routers.radarr.middlewares=lan-whitelist@docker"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # Themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
      - TP_THEME=${TP_THEME}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - ${TBOX_CONFIG}/tools/radarr:/config
      # Storage dirs
      - ${TBOX_STORAGE}/data:/data
    ports:
      # Radarr Web UI port
      - 7878:7878
    restart: unless-stopped

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.tls.certresolver=myresolver"
      - "traefik.http.routers.sonarr.rule=Host(`tv.${TBOX_DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.sonarr.service=sonarr"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      # Traefik - ipwhitelist
      - "traefik.http.routers.sonarr.middlewares=lan-whitelist@docker"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # Themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_THEME=${TP_THEME}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - ${TBOX_CONFIG}/tools/sonarr:/config
      # Storage dir
      - ${TBOX_STORAGE}/data:/data
    ports:
      - 8989:8989
    restart: unless-stopped

  sonarr-anime:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr-anime
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr-anime.tls=true"
      - "traefik.http.routers.sonarr-anime.tls.certresolver=myresolver"
      - "traefik.http.routers.sonarr-anime.rule=Host(`anime.${TBOX_DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.sonarr-anime.service=sonarr-anime"
      - "traefik.http.services.sonarr-anime.loadbalancer.server.port=8998"
      # Traefik - ipwhitelist
      - "traefik.http.routers.sonarr.middlewares=lan-whitelist@docker"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # Themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_THEME=${TP_THEME}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - ${TBOX_CONFIG}/tools/sonarr-anime:/config
      # Storage dir
      - ${TBOX_STORAGE}/data:/data
    ports:
      - 8998:8998
    restart: unless-stopped

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.readarr.tls=true"
      - "traefik.http.routers.readarr.tls.certresolver=myresolver"
      - "traefik.http.routers.readarr.rule=Host(`readarr.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.readarr.service=readarr"
      - "traefik.http.services.readarr.loadbalancer.server.port=8787"
      # Traefik - ipwhitelist
      - "traefik.http.routers.readarr.middlewares=lan-whitelist@docker"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # Themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:readarr
      - TP_THEME=${TP_THEME}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - ${TBOX_CONFIG}/tools/readarr:/config
      # Storage dir
      - ${TBOX_STORAGE}/data:/data
    ports:
      - 8787:8787
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.tls=true"
      - "traefik.http.routers.prowlarr.tls.certresolver=myresolver"
      - "traefik.http.routers.prowlarr.rule=Host(`indexer.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.prowlarr.service=prowlarr"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
      # Traefik - ipwhitelist
      - "traefik.http.routers.prowlarr.middlewares=lan-whitelist@docker"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # Themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:prowlarr
      - TP_THEME=${TP_THEME}
    volumes:
      - ${TBOX_CONFIG}/tools/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.tls=true"
      - "traefik.http.routers.jellyfin.tls.certresolver=myresolver"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.jellyfin.service=jellyfin"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
      # Traefik - ipwhitelist
      - "traefik.http.routers.jellyfin.middlewares=wg-whitelist@docker"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_PUBLISHEDSERVERURL}
    volumes:
      - ${TBOX_CONFIG}/tools/jellyfin:/config
      - ${TBOX_STORAGE}/data/media:/data/media
    ports:
      - 8096:8096
    #   - 8920:8920 #optional
    #   - 7359:7359/udp #optional
    #   - 1900:1900/udp #optional
    restart: unless-stopped

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.jellyseerr.tls=true"
      - "traefik.http.routers.jellyseerr.tls.certresolver=myresolver"
      - "traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.jellyseerr.service=jellyseerr"
      - "traefik.http.services.jellyseerr.loadbalancer.server.port=5055"
      # Traefik - ipwhitelist
      - "traefik.http.routers.jellyseer.middlewares=wg-whitelist@docker"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${TBOX_CONFIG}/tools/jellyseerr:/app/config
    ports:
      - 5055:5055
    restart: unless-stopped

  kavita:
    image: jvmilazz0/kavita:latest    # Using the stable branch from the offical repo.
    container_name: kavita
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.kavita.tls=true"
      - "traefik.http.routers.kavita.tls.certresolver=myresolver"
      - "traefik.http.routers.kavita.rule=Host(`kavita.${TBOX_DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.kavita.service=kavita"
      - "traefik.http.services.kavita.loadbalancer.server.port=5000"
        # Traefik - ipwhitelist
      - "traefik.http.routers.kavita.middlewares=wg-whitelist@docker"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
        - ${TBOX_STORAGE}/data/usenet/books:/books_usenet
        - ${TBOX_STORAGE}/data/media/books:/books_media
        - ${TBOX_CONFIG}/tools/kavita:/kavita/config
    ports:
        - "5000:5000" 
    restart: unless-stopped

  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.homarr.tls=true"
      - "traefik.http.routers.homarr.tls.certresolver=myresolver"
      - "traefik.http.routers.homarr.rule=Host(`homarr.${TBOX_DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.homarr.service=homarr"
      - "traefik.http.services.homarr.loadbalancer.server.port=7575"
        # Traefik - ipwhitelist
      - "traefik.http.routers.homarr.middlewares=lan-whitelist@docker"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - ${TBOX_CONFIG}/tools/homarr/configs:/app/data/configs
      - ${TBOX_CONFIG}/tools/homarr/icons:/app/public/icons
      - ${TBOX_CONFIG}/tools/homarr/data:/data
    ports:
      - '7575:7575'

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.homeassistant.tls=true"
      - "traefik.http.routers.homeassistant.tls.certresolver=myresolver"
      - "traefik.http.routers.homeassistant.rule=Host(`ha.${TBOX_DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.homeassistant.service=homeassistant"
      - "traefik.http.services.homeassistant.loadbalancer.server.port=8123"
      # Traefik - ipwhitelist
      - "traefik.http.routers.homeassistant.middlewares=lan-whitelist@docker"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${TBOX_CONFIG}/tools/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 8123:8123
    restart: unless-stopped
    privileged: true

      # gluetun:
  #   image: qmcgaw/gluetun
  #   container_name: gluetun
  #   labels:
  #     # Enable automatic update with Watchtower
  #     - "com.centurylinklabs.watchtower.enable=true"
  #     - "traefik.enable=true"
  #     #deluge
  #     - "traefik.http.routers.deluge.rule=Host(`deluge.${TBOX_DOMAIN}`)"
  #     - "traefik.http.routers.deluge.service=deluge"
  #     - "traefik.http.routers.deluge.tls=true"
  #     - "traefik.http.routers.deluge.tls.certresolver=myresolver"
  #     - "traefik.http.services.deluge.loadbalancer.server.port=8112"
  #   cap_add:
  #     - NET_ADMIN
  #   devices:
  #     - /dev/net/tun:/dev/net/tun
  #   environment:
  #     - TZ=${TIMEZONE}
  #     # OPEN VPN CONFIG
  #     #- VPN_SERVICE_PROVIDER=custom
  #     #- VPN_TYPE=openvpn
  #     #- OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf
  #     #- OPENVPN_USER=${OPENVPN_USERNAME}
  #     #- OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
  #     # WIREGUARD CONFIG
  #     - VPN_SERVICE_PROVIDER=custom
  #     - VPN_TYPE=wireguard
  #     - VPN_ENDPOINT_IP=${VPN_ENDPOINT_IP}
  #     - VPN_ENDPOINT_PORT=${VPN_ENDPOINT_PORT}
  #     - WIREGUARD_PUBLIC_KEY=${WIREGUARD_PUBLIC_KEY}
  #     - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
  #     - WIREGUARD_ADDRESSES=${WIREGUARD_ADDRESSES}
  #     #HTTP PROXY
  #     - HTTPPROXY=on
  #     - HTTPPROXY_USER=${HTTPPROXY_USER}
  #     - HTTPPROXY_PASSWORD=${HTTPPROXY_PASSWORD}
  #   #volumes:
  #     #- ${OPENVPN_CONF}:/gluetun/custom.conf:ro
  #   ports:
  #     # Gluetun
  #     - 8888:8888/tcp # HTTP proxy
  #     - 8388:8388/tcp # Shadowsocks
  #     - 8388:8388/udp # Shadowsocks
  #     # Deluge
  #     - 8112:8112
  #   restart: unless-stopped

  # deluge:
  #   image: lscr.io/linuxserver/deluge:latest
  #   container_name: deluge
  #   labels:
  #     # Enable automatic update with Watchtower
  #     - "com.centurylinklabs.watchtower.enable=true"
  #   network_mode: "service:gluetun"
  #   environment:
  #     - PUID=${USER_PUID}
  #     - PGID=${USER_PGID}
  #     - TZ=${TIMEZONE}
  #     - DELUGE_LOGLEVEL=error #optional
  #     - UMASK=002
  #     # Themes
  #     - DOCKER_MODS=ghcr.io/gilbn/theme.park:deluge
  #     - TP_THEME=${TP_THEME}
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     # Configuration dir
  #     - ${TBOX_CONFIG}/tools/deluge:/config
  #     # Storage dirs
  #     - ${TBOX_STORAGE}/data/torrents:/data/torrents
  #   depends_on:
  #     gluetun:
  #       condition: service_healthy
  #   restart: unless-stopped