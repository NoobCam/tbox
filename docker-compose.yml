version: "3.3"

services:

  traefik:
    image: "traefik:v2.2"
    container_name: "traefik"
    command:
#      - "--log.level=DEBUG"
#      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Let's Encrypt - wildcard - Namecheap
      - --entrypoints.websecure.http.tls.domains[0].main=${TBOX_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${TBOX_DOMAIN}
      - --entrypoints.websecure.http.tls.certresolver=myresolver
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.disablepropagationcheck=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=namecheap
      - --certificatesresolvers.myresolver.acme.email=netsecnoob@protonmail.com
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    labels:
      - "traefik.http.middlewares.httpsonly.redirectscheme.scheme=https"
      - "traefik.http.middlewares.httpsonly.redirectscheme.permanent=true"
      - "traefik.http.routers.httpsonly.rule=HostRegexp(`{any:.*}`)"
      - "traefik.http.routers.httpsonly.middlewares=httpsonly"
      #Dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=dashboard@internal"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      #API
      - "traefik.http.routers.api.rule=Host(`traefik.${TBOX_DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=myresolver"

    environment:
      - "NAMECHEAP_API_USER=${NAMECHEAP_API_USER}"
      - "NAMECHEAP_API_KEY=${NAMECHEAP_API_KEY}"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ${TBOX_CONFIG}/tools/traefik:/letsencrypt

  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    labels:
    # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      #deluge
      - "traefik.http.routers.deluge.rule=Host(`deluge.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.deluge.service=deluge"
      - "traefik.http.routers.myweb.tls=true"
      - "traefik.http.routers.myweb.tls.certresolver=myresolver"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      - TZ=${TIMEZONE}
      #OPEN VPN CONFIG
      #- VPN_SERVICE_PROVIDER=custom
      #- VPN_TYPE=openvpn
      #- OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf
      #- OPENVPN_USER=${OPENVPN_USERNAME}
      #- OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      #WIREGUARD CONFIG
      - VPN_SERVICE_PROVIDER=custom
      - VPN_TYPE=wireguard
      - VPN_ENDPOINT_IP=${VPN_ENDPOINT_IP}
      - VPN_ENDPOINT_PORT=${VPN_ENDPOINT_PORT}
      - WIREGUARD_PUBLIC_KEY=${WIREGUARD_PUBLIC_KEY}
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - WIREGUARD_ADDRESSES=${WIREGUARD_ADDRESSES}
      #HTTP PROXY
      - HTTPPROXY=on
      - HTTPPROXY_USER=${HTTPPROXY_USER}
      - HTTPPROXY_PASSWORD=${HTTPPROXY_PASSWORD}
    #volumes:
      #- ${OPENVPN_CONF}:/gluetun/custom.conf:ro
    ports:
      # Gluetun
      - 8888:8888/tcp # HTTP proxy
      - 8388:8388/tcp # Shadowsocks
      - 8388:8388/udp # Shadowsocks
      # Deluge
      - 8112:8112

  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    network_mode: "service:gluetun"
    environment:
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - DELUGE_LOGLEVEL=error #optional
      - UMASK=002
      # themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:deluge
      - TP_THEME=${TP_THEME}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - ${TBOX_CONFIG}/tools/deluge:/config
      # Storage dirs
      - ${TBOX_STORAGE}/data/torrents:/data/torrents
    depends_on:
      gluetun:
        condition: service_healthy
    restart: unless-stopped

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.rule=Host(`nzb.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.sabnzbd.service=sabnzbd"
      - "traefik.http.routers.myweb.tls=true"
      - "traefik.http.routers.myweb.tls.certresolver=myresolver"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
    environment:
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sabnzbd
      - TP_THEME=${TP_THEME}
    volumes:
      - ${TBOX_CONFIG}/tools/sabnzbd:/config
      - ${TBOX_STORAGE}/data/usenet:/data/usenet
    ports:
      -  8080:8080
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`movies.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.service=radarr"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
      - TP_THEME=${TP_THEME}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - ${TBOX_CONFIG}/tools/radarr:/config
      # Storage dirs
      - ${TBOX_STORAGE}/data:/data
    ports:
      # Radarr Web UI port
      - 7878:7878
    restart: unless-stopped

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`tv.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.sonarr.entrypoints=web"
      - "traefik.http.routers.sonarr.service=sonarr"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    environment:
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_THEME=${TP_THEME}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - ${TBOX_CONFIG}/tools/sonarr:/config
      # Storage dir
      - ${TBOX_STORAGE}/data:/data
    ports:
      - 8989:8989
    restart: unless-stopped

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.readarr.rule=Host(`readarr.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.readarr.entrypoints=web"
      - "traefik.http.routers.readarr.service=readarr"
      - "traefik.http.services.readarr.loadbalancer.server.port=8787"
    environment:
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:readarr
      - TP_THEME=${TP_THEME}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - ${TBOX_CONFIG}/tools/readarr:/config
      # Storage dir
      - ${TBOX_STORAGE}/data:/data
    ports:
      - 8787:8787
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`indexer.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.prowlarr.entrypoints=web"
      - "traefik.http.routers.prowlarr.service=prowlarr"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
    environment:
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      # themes
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:prowlarr
      - TP_THEME=${TP_THEME}
    volumes:
      - ${TBOX_CONFIG}/tools/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped

# Jellyfin

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      # Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${TBOX_DOMAIN}`)"
      - "traefik.http.routers.jellyfin.entrypoints=web"
      - "traefik.http.routers.jellyfin.service=jellyfin"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
    environment:
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_PUBLISHEDSERVERURL}
    volumes:
      - ${TBOX_CONFIG}/tools/jellyfin:/config
      - ${TBOX_STORAGE}/data/media:/data/media
    ports:
      - 8096:8096
    #   - 8920:8920 #optional
    #   - 7359:7359/udp #optional
    #   - 1900:1900/udp #optional
    restart: unless-stopped